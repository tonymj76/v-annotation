// Code generated by MockGen. DO NOT EDIT.
// Source: ./datastore/repository.go

// Package rest_service is a generated GoMock package.
package rest_service

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tonymj76/video-annotator/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 *gin.Context, arg1 *model.AnnotatedVideo) (*model.AnnotatedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.AnnotatedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// CreateAnnotationByID mocks base method.
func (m *MockRepository) CreateAnnotationByID(arg0 *gin.Context, arg1 *model.AnnotationSegments) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotationByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnotationByID indicates an expected call of CreateAnnotationByID.
func (mr *MockRepositoryMockRecorder) CreateAnnotationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotationByID", reflect.TypeOf((*MockRepository)(nil).CreateAnnotationByID), arg0, arg1)
}

// DeleteAnnotationByID mocks base method.
func (m *MockRepository) DeleteAnnotationByID(ctx *gin.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotationByID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnnotationByID indicates an expected call of DeleteAnnotationByID.
func (mr *MockRepositoryMockRecorder) DeleteAnnotationByID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotationByID", reflect.TypeOf((*MockRepository)(nil).DeleteAnnotationByID), ctx)
}

// DeleteVideo mocks base method.
func (m *MockRepository) DeleteVideo(ctx *gin.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockRepositoryMockRecorder) DeleteVideo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockRepository)(nil).DeleteVideo), ctx)
}

// FetchAnnotationByID mocks base method.
func (m *MockRepository) FetchAnnotationByID(arg0 *gin.Context) (*model.AnnotatedSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAnnotationByID", arg0)
	ret0, _ := ret[0].(*model.AnnotatedSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAnnotationByID indicates an expected call of FetchAnnotationByID.
func (mr *MockRepositoryMockRecorder) FetchAnnotationByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAnnotationByID", reflect.TypeOf((*MockRepository)(nil).FetchAnnotationByID), arg0)
}

// FetchAnnotations mocks base method.
func (m *MockRepository) FetchAnnotations(ctx *gin.Context) ([]*model.AnnotatedSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAnnotations", ctx)
	ret0, _ := ret[0].([]*model.AnnotatedSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAnnotations indicates an expected call of FetchAnnotations.
func (mr *MockRepositoryMockRecorder) FetchAnnotations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAnnotations", reflect.TypeOf((*MockRepository)(nil).FetchAnnotations), ctx)
}

// FetchVideoByID mocks base method.
func (m *MockRepository) FetchVideoByID(arg0 *gin.Context) (*model.AnnotatedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVideoByID", arg0)
	ret0, _ := ret[0].(*model.AnnotatedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVideoByID indicates an expected call of FetchVideoByID.
func (mr *MockRepositoryMockRecorder) FetchVideoByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVideoByID", reflect.TypeOf((*MockRepository)(nil).FetchVideoByID), arg0)
}

// FetchVideos mocks base method.
func (m *MockRepository) FetchVideos(arg0 *gin.Context) ([]*model.AnnotatedVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchVideos", arg0)
	ret0, _ := ret[0].([]*model.AnnotatedVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchVideos indicates an expected call of FetchVideos.
func (mr *MockRepositoryMockRecorder) FetchVideos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchVideos", reflect.TypeOf((*MockRepository)(nil).FetchVideos), arg0)
}

// UpdateAnnotationByID mocks base method.
func (m *MockRepository) UpdateAnnotationByID(arg0 *gin.Context, arg1 *model.AnnotatedSegment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotationByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotationByID indicates an expected call of UpdateAnnotationByID.
func (mr *MockRepositoryMockRecorder) UpdateAnnotationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotationByID", reflect.TypeOf((*MockRepository)(nil).UpdateAnnotationByID), arg0, arg1)
}
